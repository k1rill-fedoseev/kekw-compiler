(func get (list i)
    (
        (setq lst list)
        (setq x 0)
        (while (less x i) ((setq lst (tail lst)) (setq x (plus x 1))))
        (return (head lst))
    )
)

(func concat2 (a1 a2)
    (cond (isnull a1)
        a2
        (cons (head a1) (concat2 (tail a1) a2))
    )
)

(func set (list i x)
    (
        (setq res ())
        (setq lst list)
        (setq p 0)

        (while (less p i)
            (
                (setq res (concat2 res ((head lst))))
                (setq lst (tail lst))
                (setq p (plus p 1))
            )
        )
        (setq lst (tail lst))
        (setq res (concat2 res (x)))
        (setq res (concat2 res lst))
        (return res)
    )
)

(func get2 (list i j)
    (
        (setq inner (get list i))
        (return (get inner j))
    )
)

(func set2 (list i j u)
    (
        (setq inner (get list i))
        (setq inner (set inner j u))
        (return (set list i inner))
    )
)

(func
    rem (a b)
    (minus a (times b (divide a b)))
)


(func
    checkRow (field row)
    (
        (setq i 0)
        (while (less i 9)
            (
                (setq j i)
                (while (less j 9)
                    (
                        (cond (and (nonequal 0 (get2 field row i)) (not (equal i j)))
                            (cond (equal (get2 field row i) (get2 field row j))
                                (return false)
                            )
                        )
                        (setq j (plus j 1))
                    )
                )
                (setq i (plus i 1))
            )
        )
        (return true)
    )
)

(func
    checkCol (field col)
    (
        (setq i 0)
        (while (less i 9)
            (
                (setq j i)
                (while (less j 9)
                    (
                        (cond (and (nonequal 0 (get2 field i col)) (not (equal i j)))
                            (cond (equal (get2 field i col) (get2 field j col))
                                (return false)
                            )
                        )
                        (setq j (plus j 1))
                    )
                )
                (setq i (plus i 1))
            )
        )
        (return true)
    )
)



(func
    checkSq (field row col)
    (
        (setq is (divide row 3))
        (setq js (divide col 3))
        (setq flatten ())
        (setq c 0)
        (while (less c 9)
            (
                (setq i (plus (times 3 is) (divide c 3)))
                (setq j (plus (times 3 js) (rem c 3)))
                (setq flatten (concat2 flatten ((get2 field i j))))
                (setq c (plus c 1))
            )
        )

        (return (checkRow (flatten) 0))
    )
)


(func
    check (field row col)
    (and (and (checkRow field row) (checkCol field col)) (checkSq field row col))
)

(func
    solve (field next)
    (
        (cond (equal next 81) (return field))
        (setq row (divide next 9))
        (setq col (rem next 9))
        (cond (equal 0 (get2 field row col))
            (
                (setq i 1)
                (while (lesseq i 9)
                    (
                        (setq field (set2 field row col i))
                        (cond (check field row col)
                            (
                                (setq res (solve field (plus next 1)))
                                (cond
                                    (not (isbool res))
                                    (return res)
                                )
                            )
                        )
                        (setq i (plus i 1))
                    )
                )
                (return false)
            )
            (return (solve field (plus next 1)))
        )
    )
)

(func
    print2 (arr2)
    (cond (not (isnull arr2))
        (
            (println (head arr2))
            (print2 (tail arr2))
            (return "")
        )
    )
)

(setq fHard (
  (1 0 5 9 0 0 7 6 0)
  (0 2 0 0 0 3 0 0 0)
  (0 0 6 0 0 0 0 8 0)
  (0 0 4 0 0 0 5 1 0)
  (8 0 0 0 4 0 0 0 0)
  (0 5 0 0 0 0 8 0 0)
  (0 0 9 0 0 0 1 0 0)
  (0 0 0 5 6 0 0 9 0)
  (0 0 0 0 2 0 0 0 3)
)
)

(setq fEasy (
  (0 0 0 9 0 6 0 0 0)
  (4 2 0 0 0 8 6 0 0)
  (0 0 1 0 0 7 2 0 8)
  (8 0 0 4 0 9 5 1 7)
  (7 4 0 0 0 1 9 3 0)
  (0 9 6 7 3 0 0 2 0)
  (0 0 0 5 1 3 0 6 0)
  (2 0 7 6 0 4 0 0 0)
  (0 1 0 0 0 0 4 5 9)
)
)

(println "Initial:")
(print2 fHard)
(println "Solved:")
(print2 (solve fHard 0))
